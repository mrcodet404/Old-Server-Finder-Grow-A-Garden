local WindUI = loadstring(game:HttpGet("https://github.com/Footagesus/WindUI/releases/latest/download/main.lua"))()

-- Create Window
local Window = WindUI:CreateWindow({
    Title = "V I L L A I N S ",
    Icon = "crown",
    Author = "Indo Voice",
    Size = UDim2.fromOffset(580, 460),
    MinSize = Vector2.new(560, 350),
    MaxSize = Vector2.new(850, 560),
    Transparent = true,
    Theme = "Dark",
    Resizable = true,
    SideBarWidth = 200,
    BackgroundImageTransparency = 0.42,
    HideSearchBar = true,
    ScrollBarEnabled = false,
    OnlyMobile = false,
    Enabled = true,
    Draggable = true,
    User = {
        Enabled = true,
        Anonymous = false,
        Callback = function()
            
        end,
    },
    KeySystem = {                                                   
        Note = "Villains Key System",              
        API = {                                                     
            { -- PlatoBoost
                Type = "platoboost",                                
                ServiceId = 11293,
                Secret = "6569f8ff-3435-4b85-8ce3-fd8db6e45e8e",
            },                                                      
        },
    },        
})

-- ============================================
-- 🎣 AUTO FISHING SYSTEM - MOBILE OPTIMIZED
-- ============================================

local Players = game:GetService("Players")
local VirtualInputManager = game:GetService("VirtualInputManager")
local UserInputService = game:GetService("UserInputService")
local RunService = game:GetService("RunService")
local LocalPlayer = Players.LocalPlayer
local PlayerGui = LocalPlayer:WaitForChild("PlayerGui")

-- Deteksi Platform yang lebih akurat
local function DetectPlatform()
    local touchEnabled = UserInputService.TouchEnabled
    local mouseEnabled = UserInputService.MouseEnabled
    local keyboardEnabled = UserInputService.KeyboardEnabled
    
    if touchEnabled and not mouseEnabled and not keyboardEnabled then
        return "MOBILE"
    elseif touchEnabled and (mouseEnabled or keyboardEnabled) then
        return "TABLET" -- Tablet atau PC dengan touchscreen
    else
        return "PC"
    end
end

local Platform = DetectPlatform()
local IsMobile = (Platform == "MOBILE" or Platform == "TABLET")

-- Config
local FishingConfig = {
    Enabled = false,
    HideUI = true,
    HoldDuration = IsMobile and 1.8 or 1.5, -- Lebih lama untuk mobile
    DelayAfterCatch = 0.5,
    DelayBeforeRecast = 1.5,
    CastInterval = 2.5,
    DebugMode = false,
}

-- Status
local FishingStatus = {
    IsHolding = false,
    InMinigame = false,
    LastCastTime = 0,
    CurrentHoldTime = 0,
    HoldConnection = nil,
}

-- Functions
local function DebugLog(message)
    if FishingConfig.DebugMode then
        print("[FISHING DEBUG]", message)
    end
end

local function HideFishingUI()
    if FishingConfig.HideUI then
        local ui = PlayerGui:FindFirstChild("FishingUI")
        if ui then
            ui:Destroy()
        end
    end
end

local function HasRodEquipped()
    local character = LocalPlayer.Character
    if not character then return false end
    return character:FindFirstChild("Fishing Rod") ~= nil
end

-- ============================================
-- 🖱️📱 IMPROVED INPUT SYSTEM
-- ============================================

-- Get optimal touch/click position
local function GetInputPosition()
    local camera = workspace.CurrentCamera
    local viewportSize = camera.ViewportSize
    
    -- Gunakan center screen untuk reliability
    local x = viewportSize.X / 2
    local y = viewportSize.Y / 2
    
    return Vector2.new(x, y)
end

-- MOBILE: Touch Down (Improved)
local function MobileTouchDown()
    local pos = GetInputPosition()
    DebugLog("Touch Down at: " .. tostring(pos))
    
    -- PRIMARY METHOD: Mouse Button Event (paling reliable di mobile Roblox)
    local success1 = pcall(function()
        VirtualInputManager:SendMouseButtonEvent(pos.X, pos.Y, 0, true, game, 0)
    end)
    
    if not success1 then
        -- FALLBACK: Direct keyboard event (beberapa game pakai ini)
        pcall(function()
            VirtualInputManager:SendKeyEvent(true, Enum.KeyCode.ButtonR2, false, game)
        end)
    end
    
    task.wait(0.02) -- Small delay untuk ensure registration
end

-- MOBILE: Touch Up (Improved)
local function MobileTouchUp()
    local pos = GetInputPosition()
    DebugLog("Touch Up at: " .. tostring(pos))
    
    local success1 = pcall(function()
        VirtualInputManager:SendMouseButtonEvent(pos.X, pos.Y, 0, false, game, 0)
    end)
    
    if not success1 then
        pcall(function()
            VirtualInputManager:SendKeyEvent(false, Enum.KeyCode.ButtonR2, false, game)
        end)
    end
    
    task.wait(0.02)
end

-- PC: Mouse Events
local function PCMouseDown()
    DebugLog("Mouse Down")
    VirtualInputManager:SendMouseButtonEvent(0, 0, 0, true, game, 0)
end

local function PCMouseUp()
    DebugLog("Mouse Up")
    VirtualInputManager:SendMouseButtonEvent(0, 0, 0, false, game, 0)
end

-- ============================================
-- 🎯 UNIVERSAL HOLD SYSTEM (PC & MOBILE)
-- ============================================

local function StartHold()
    if FishingStatus.IsHolding then return end
    
    FishingStatus.IsHolding = true
    FishingStatus.CurrentHoldTime = 0
    
    -- Send initial press
    if IsMobile then
        MobileTouchDown()
    else
        PCMouseDown()
    end
    
    DebugLog("Hold Started - Duration: " .. FishingConfig.HoldDuration .. "s")
    
    -- Create hold connection using RunService for precise timing
    if FishingStatus.HoldConnection then
        FishingStatus.HoldConnection:Disconnect()
    end
    
    local startTime = tick()
    
    FishingStatus.HoldConnection = RunService.Heartbeat:Connect(function(delta)
        if not FishingStatus.IsHolding then
            if FishingStatus.HoldConnection then
                FishingStatus.HoldConnection:Disconnect()
                FishingStatus.HoldConnection = nil
            end
            return
        end
        
        FishingStatus.CurrentHoldTime = tick() - startTime
        
        -- Check if hold duration reached
        if FishingStatus.CurrentHoldTime >= FishingConfig.HoldDuration then
            -- Hold duration completed, release
            EndHold()
        end
    end)
end

local function EndHold()
    if not FishingStatus.IsHolding then return end
    
    DebugLog("Hold Ended - Held for: " .. string.format("%.2f", FishingStatus.CurrentHoldTime) .. "s")
    
    FishingStatus.IsHolding = false
    
    -- Disconnect hold monitor
    if FishingStatus.HoldConnection then
        FishingStatus.HoldConnection:Disconnect()
        FishingStatus.HoldConnection = nil
    end
    
    -- Send release
    if IsMobile then
        MobileTouchUp()
    else
        PCMouseUp()
    end
    
    FishingStatus.CurrentHoldTime = 0
end

-- ============================================
-- 🎣 AUTO CAST & CATCH
-- ============================================

local function AutoCast()
    if not FishingConfig.Enabled then return end
    if FishingStatus.InMinigame then return end
    if not HasRodEquipped() then return end
    
    local currentTime = tick()
    if currentTime - FishingStatus.LastCastTime < 2 then
        return
    end
    
    FishingStatus.LastCastTime = currentTime
    DebugLog("=== AUTO CAST STARTED ===")
    
    -- Extra delay untuk mobile stability
    if IsMobile then
        task.wait(0.1)
    end
    
    -- Use new hold system
    StartHold()
    -- Hold will automatically release after duration via RunService
end

local function AutoCatch()
    if not FishingConfig.Enabled then return end
    
    DebugLog("=== AUTO CATCH STARTED ===")
    
    local character = LocalPlayer.Character
    if not character then return end
    
    local rod = character:FindFirstChild("Fishing Rod")
    if not rod then return end
    
    local catchRemote = rod:FindFirstChild("Catch")
    if not catchRemote then return end
    
    local success = pcall(function()
        catchRemote:FireServer(true)
    end)
    
    if success then
        DebugLog("Fish caught successfully!")
        FishingStatus.InMinigame = false
        
        task.wait(FishingConfig.DelayAfterCatch)
        HideFishingUI()
        
        task.wait(FishingConfig.DelayBeforeRecast)
        if FishingConfig.Enabled then
            AutoCast()
        end
    else
        DebugLog("Catch failed!")
        FishingStatus.InMinigame = false
    end
end

-- Deteksi Minigame via UI
PlayerGui.ChildAdded:Connect(function(child)
    if child.Name == "FishingUI" and FishingConfig.Enabled and not FishingStatus.InMinigame then
        FishingStatus.InMinigame = true
        DebugLog("Minigame detected via UI!")
        task.wait(0.1)
        AutoCatch()
    end
end)

-- Connect Events
local function ConnectFishingEvents()
    local character = LocalPlayer.Character
    if not character then return end
    
    local rod = character:WaitForChild("Fishing Rod", 10)
    if not rod then return end
    
    DebugLog("Connecting fishing events...")
    
    -- StartMinigame
    local startMinigame = rod:FindFirstChild("StartMinigame")
    if startMinigame then
        startMinigame.OnClientEvent:Connect(function()
            if FishingConfig.Enabled and not FishingStatus.InMinigame then
                FishingStatus.InMinigame = true
                DebugLog("Minigame detected via StartMinigame event!")
                task.wait(0.1)
                AutoCatch()
            end
        end)
    end
    
    -- LureLanded
    local lureLanded = rod:FindFirstChild("LureLanded")
    if lureLanded then
        lureLanded.OnClientEvent:Connect(function()
            DebugLog("Lure landed!")
        end)
    end
    
    -- FishingCanceled
    local canceled = rod:FindFirstChild("FishingCanceled")
    if canceled then
        canceled.OnClientEvent:Connect(function()
            DebugLog("Fishing canceled!")
            FishingStatus.InMinigame = false
            
            if FishingStatus.IsHolding then
                EndHold()
            end
            
            HideFishingUI()
            task.wait(2)
            if FishingConfig.Enabled then AutoCast() end
        end)
    end
end

-- Reconnect on Respawn
LocalPlayer.CharacterAdded:Connect(function()
    DebugLog("Character respawned, resetting...")
    FishingStatus.InMinigame = false
    
    if FishingStatus.IsHolding then
        EndHold()
    end
    
    task.wait(3)
    ConnectFishingEvents()
    
    task.wait(2)
    if FishingConfig.Enabled then
        AutoCast()
    end
end)

-- Auto Loop
task.spawn(function()
    task.wait(5)
    
    while task.wait(FishingConfig.CastInterval) do
        if not FishingConfig.Enabled then continue end
        if FishingStatus.InMinigame then continue end
        if FishingStatus.IsHolding then continue end
        
        local timeSinceLastCast = tick() - FishingStatus.LastCastTime
        if timeSinceLastCast >= FishingConfig.CastInterval then
            AutoCast()
        end
        
        HideFishingUI()
    end
end)

-- Anti AFK
local VirtualUser = game:GetService("VirtualUser")
LocalPlayer.Idled:Connect(function()
    VirtualUser:CaptureController()
    VirtualUser:ClickButton2(Vector2.new())
end)

-- Initialize
ConnectFishingEvents()

-- ============================================
-- 🎨 UI TABS & CONTROLS
-- ============================================

-- Create Tab
local Tab = Window:Tab({
    Title = "Fishing",
    Icon = "fish",
    Locked = false,
})

-- Keybind (hanya untuk PC)
if not IsMobile then
    local Keybind = Tab:Keybind({
        Title = "Keybind",
        Desc = "Keybind to open ui",
        Value = "V",
        Callback = function(v)
            Window:SetToggleKey(Enum.KeyCode[v])
        end
    })
end

-- Section: Auto Fishing
Tab:Section({
    Title = "Auto Fishing"
})

-- Toggle Auto Fish
local ToggleAutoFish = Tab:Toggle({
    Title = "Auto Fish",
    Desc = "Automatically cast and catch fish instantly",
    Value = false,
    Callback = function(state) 
        FishingConfig.Enabled = state
        
        if state then
            DebugLog("Auto Fish ENABLED")
            task.wait(1)
            if HasRodEquipped() then
                AutoCast()
            else
                WindUI:Notify({
                    Title = "Auto Fish",
                    Content = "Please Equip Rod First",
                    Duration = 5,
                    Icon = "fish",
                })
            end
        else
            DebugLog("Auto Fish DISABLED")
            if FishingStatus.IsHolding then
                EndHold()
            end
        end
    end
})

-- Toggle Hide UI
local ToggleHideUI = Tab:Toggle({
    Title = "Hide Fishing UI",
    Desc = "Automatically hide fishing minigame UI",
    Value = true,
    Callback = function(state)
        FishingConfig.HideUI = state
    end
})

-- Section: Settings
Tab:Section({
    Title = "Settings"
})

-- Slider Cast Power (Hold Duration)
local SliderCastPower = Tab:Slider({
    Title = "Cast Power (Hold Time)",
    Desc = "How long to hold touch/click (seconds)",
    Step = 0.1,
    Value = {
        Min = 0.5,
        Max = 3,
        Default = IsMobile and 1.8 or 1.5,
    },
    Callback = function(value)
        FishingConfig.HoldDuration = value
        DebugLog("Hold duration changed to: " .. value .. "s")
    end
})

-- Slider Delay After Catch
local SliderDelayAfterCatch = Tab:Slider({
    Title = "Delay After Catch",
    Desc = "Delay after catching fish (seconds)",
    Step = 0.1,
    Value = {
        Min = 0.1,
        Max = 3,
        Default = 0.60,
    },
    Callback = function(value)
        FishingConfig.DelayAfterCatch = value
    end
})

-- Slider Delay Before Recast
local SliderDelayBeforeRecast = Tab:Slider({
    Title = "Delay Before Recast",
    Desc = "Delay before casting again (seconds)",
    Step = 0.1,
    Value = {
        Min = 0.5,
        Max = 5,
        Default = 1.10,
    },
    Callback = function(value)
        FishingConfig.DelayBeforeRecast = value
    end
})

-- Section: Mobile/Debug Tools
Tab:Section({
    Title = IsMobile and "Mobile Tools" or "Debug Tools"
})

-- Manual Test Cast
Tab:Button({
    Title = "Test Cast",
    Desc = "Test manual cast (hold " .. FishingConfig.HoldDuration .. "s)",
    Callback = function()
        if HasRodEquipped() then
            AutoCast()
            WindUI:Notify({
                Title = "Test Cast",
                Content = "Casting for " .. FishingConfig.HoldDuration .. " seconds...",
                Duration = 2,
                Icon = "fish",
            })
        else
            WindUI:Notify({
                Title = "Test Cast",
                Content = "No rod equipped!",
                Duration = 2,
                Icon = "alert-circle",
            })
        end
    end
})

-- Debug Mode Toggle
Tab:Toggle({
    Title = "Debug Mode",
    Desc = "Show debug logs in console (F9)",
    Value = false,
    Callback = function(state)
        FishingConfig.DebugMode = state
        DebugLog("Debug mode " .. (state and "ENABLED" or "DISABLED"))
    end
})

-- Platform Info
Tab:Label({
    Title = "Platform: " .. Platform,
    Desc = "Touch Position: Center (" .. math.floor(GetInputPosition().X) .. ", " .. math.floor(GetInputPosition().Y) .. ")"
})

-- Success notification
WindUI:Notify({
    Title = "Villains Hub",
    Content = "Auto Fish Loaded | Platform: " .. Platform .. " | Hold: " .. FishingConfig.HoldDuration .. "s",
    Duration = 5,
    Icon = "crown",
})

DebugLog("=== SCRIPT LOADED SUCCESSFULLY ===")
DebugLog("Platform: " .. Platform)
DebugLog("Default Hold Duration: " .. FishingConfig.HoldDuration .. "s")
