local WindUI = loadstring(game:HttpGet("https://github.com/Footagesus/WindUI/releases/latest/download/main.lua"))()

-- Create Window
local Window = WindUI:CreateWindow({
    Title = "V I L L A I N S ",
    Icon = "crown",
    Author = "Indo Voice",
    Size = UDim2.fromOffset(580, 460),
    MinSize = Vector2.new(560, 350),
    MaxSize = Vector2.new(850, 560),
    Transparent = true,
    Theme = "Dark",
    Resizable = true,
    SideBarWidth = 200,
    BackgroundImageTransparency = 0.42,
    HideSearchBar = true,
    ScrollBarEnabled = false,
    OnlyMobile = false,
    Enabled = true,
    Draggable = true,
    User = {
        Enabled = true,
        Anonymous = false,
        Callback = function()
            
        end,
    },
    KeySystem = {                                                   
        Note = "Villains Key System",              
        API = {                                                     
            { -- PlatoBoost
                Type = "platoboost",                                
                ServiceId = 11293,
                Secret = "6569f8ff-3435-4b85-8ce3-fd8db6e45e8e",
            },                                                      
        },
    },        
})

-- ============================================
-- üé£ AUTO FISHING SYSTEM - CONTINUOUS HOLD LOOP
-- ============================================

local Players = game:GetService("Players")
local VirtualInputManager = game:GetService("VirtualInputManager")
local UserInputService = game:GetService("UserInputService")
local RunService = game:GetService("RunService")
local LocalPlayer = Players.LocalPlayer
local PlayerGui = LocalPlayer:WaitForChild("PlayerGui")

-- Deteksi Platform
local function DetectPlatform()
    local touchEnabled = UserInputService.TouchEnabled
    local mouseEnabled = UserInputService.MouseEnabled
    local keyboardEnabled = UserInputService.KeyboardEnabled
    
    if touchEnabled and not mouseEnabled and not keyboardEnabled then
        return "MOBILE"
    elseif touchEnabled and (mouseEnabled or keyboardEnabled) then
        return "TABLET"
    else
        return "PC"
    end
end

local Platform = DetectPlatform()
local IsMobile = (Platform == "MOBILE" or Platform == "TABLET")

-- Config
local FishingConfig = {
    Enabled = false,
    HideUI = true,
    HoldDuration = 2, -- Default 2 detik
    DelayAfterRelease = 0.3, -- Delay setelah lepas touch sebelum hold lagi
    DelayAfterCatch = 0.5,
    DelayBeforeRecast = 1,
    DebugMode = false,
}

-- Status
local FishingStatus = {
    IsHolding = false,
    InMinigame = false,
    CastLoopRunning = false,
    HoldConnection = nil,
}

-- Functions
local function DebugLog(message)
    if FishingConfig.DebugMode then
        print("[FISHING DEBUG]", message)
    end
end

local function HideFishingUI()
    if FishingConfig.HideUI then
        local ui = PlayerGui:FindFirstChild("FishingUI")
        if ui then
            ui:Destroy()
        end
    end
end

local function HasRodEquipped()
    local character = LocalPlayer.Character
    if not character then return false end
    return character:FindFirstChild("Fishing Rod") ~= nil
end

-- ============================================
-- üñ±Ô∏èüì± INPUT SYSTEM
-- ============================================

local function GetInputPosition()
    local camera = workspace.CurrentCamera
    local viewportSize = camera.ViewportSize
    local x = viewportSize.X / 2
    local y = viewportSize.Y / 2
    return Vector2.new(x, y)
end

-- MOBILE: Touch Down
local function MobileTouchDown()
    local pos = GetInputPosition()
    DebugLog("üì± Touch Down at: " .. tostring(pos))
    
    pcall(function()
        VirtualInputManager:SendMouseButtonEvent(pos.X, pos.Y, 0, true, game, 0)
    end)
    
    task.wait(0.02)
end

-- MOBILE: Touch Up
local function MobileTouchUp()
    local pos = GetInputPosition()
    DebugLog("üì± Touch Up at: " .. tostring(pos))
    
    pcall(function()
        VirtualInputManager:SendMouseButtonEvent(pos.X, pos.Y, 0, false, game, 0)
    end)
    
    task.wait(0.02)
end

-- PC: Mouse Events
local function PCMouseDown()
    DebugLog("üñ±Ô∏è Mouse Down")
    VirtualInputManager:SendMouseButtonEvent(0, 0, 0, true, game, 0)
end

local function PCMouseUp()
    DebugLog("üñ±Ô∏è Mouse Up")
    VirtualInputManager:SendMouseButtonEvent(0, 0, 0, false, game, 0)
end

-- Universal Input
local function InputDown()
    if IsMobile then
        MobileTouchDown()
    else
        PCMouseDown()
    end
end

local function InputUp()
    if IsMobile then
        MobileTouchUp()
    else
        PCMouseUp()
    end
end

-- ============================================
-- üîÅ CONTINUOUS HOLD-RELEASE LOOP
-- ============================================

-- Perform single hold-release cycle
local function PerformHoldCycle()
    if FishingStatus.InMinigame then 
        DebugLog("‚è∏Ô∏è Skipping cast - in minigame")
        return 
    end
    
    if not HasRodEquipped() then 
        DebugLog("‚ö†Ô∏è No rod equipped!")
        return 
    end
    
    -- STEP 1: Press Down
    DebugLog("‚¨áÔ∏è HOLD START (Duration: " .. FishingConfig.HoldDuration .. "s)")
    FishingStatus.IsHolding = true
    InputDown()
    
    -- STEP 2: Hold for duration
    task.wait(FishingConfig.HoldDuration)
    
    -- STEP 3: Release
    DebugLog("‚¨ÜÔ∏è HOLD RELEASE")
    InputUp()
    FishingStatus.IsHolding = false
    
    -- STEP 4: Wait before next cycle
    DebugLog("‚è≥ Waiting " .. FishingConfig.DelayAfterRelease .. "s before next cast...")
    task.wait(FishingConfig.DelayAfterRelease)
end

-- Main continuous loop
local function StartCastLoop()
    if FishingStatus.CastLoopRunning then 
        DebugLog("‚ö†Ô∏è Cast loop already running!")
        return 
    end
    
    FishingStatus.CastLoopRunning = true
    DebugLog("üîÑ CAST LOOP STARTED")
    
    task.spawn(function()
        while FishingConfig.Enabled and task.wait(0.1) do
            if not FishingStatus.InMinigame then
                PerformHoldCycle()
            else
                DebugLog("‚è∏Ô∏è Paused - waiting for minigame to finish...")
                task.wait(1)
            end
        end
        
        -- Cleanup when stopped
        if FishingStatus.IsHolding then
            InputUp()
            FishingStatus.IsHolding = false
        end
        
        FishingStatus.CastLoopRunning = false
        DebugLog("üõë CAST LOOP STOPPED")
    end)
end

local function StopCastLoop()
    FishingConfig.Enabled = false
    
    if FishingStatus.IsHolding then
        InputUp()
        FishingStatus.IsHolding = false
    end
    
    DebugLog("üõë Stopping cast loop...")
end

-- ============================================
-- üé£ AUTO CATCH
-- ============================================

local function AutoCatch()
    if not FishingConfig.Enabled then return end
    
    DebugLog("üé£ AUTO CATCH STARTED")
    
    local character = LocalPlayer.Character
    if not character then return end
    
    local rod = character:FindFirstChild("Fishing Rod")
    if not rod then return end
    
    local catchRemote = rod:FindFirstChild("Catch")
    if not catchRemote then return end
    
    local success = pcall(function()
        catchRemote:FireServer(true)
    end)
    
    if success then
        DebugLog("‚úÖ Fish caught successfully!")
        FishingStatus.InMinigame = false
        
        task.wait(FishingConfig.DelayAfterCatch)
        HideFishingUI()
        
        task.wait(FishingConfig.DelayBeforeRecast)
        -- Loop akan otomatis lanjut karena InMinigame = false
    else
        DebugLog("‚ùå Catch failed!")
        FishingStatus.InMinigame = false
    end
end

-- Deteksi Minigame via UI
PlayerGui.ChildAdded:Connect(function(child)
    if child.Name == "FishingUI" and FishingConfig.Enabled and not FishingStatus.InMinigame then
        FishingStatus.InMinigame = true
        DebugLog("üéÆ Minigame detected via UI!")
        
        -- Stop holding if currently holding
        if FishingStatus.IsHolding then
            InputUp()
            FishingStatus.IsHolding = false
        end
        
        task.wait(0.1)
        AutoCatch()
    end
end)

-- Connect Events
local function ConnectFishingEvents()
    local character = LocalPlayer.Character
    if not character then return end
    
    local rod = character:WaitForChild("Fishing Rod", 10)
    if not rod then return end
    
    DebugLog("üîå Connecting fishing events...")
    
    -- StartMinigame
    local startMinigame = rod:FindFirstChild("StartMinigame")
    if startMinigame then
        startMinigame.OnClientEvent:Connect(function()
            if FishingConfig.Enabled and not FishingStatus.InMinigame then
                FishingStatus.InMinigame = true
                DebugLog("üéÆ Minigame started!")
                
                if FishingStatus.IsHolding then
                    InputUp()
                    FishingStatus.IsHolding = false
                end
                
                task.wait(0.1)
                AutoCatch()
            end
        end)
    end
    
    -- LureLanded
    local lureLanded = rod:FindFirstChild("LureLanded")
    if lureLanded then
        lureLanded.OnClientEvent:Connect(function()
            DebugLog("üé£ Lure landed!")
        end)
    end
    
    -- FishingCanceled
    local canceled = rod:FindFirstChild("FishingCanceled")
    if canceled then
        canceled.OnClientEvent:Connect(function()
            DebugLog("‚ùå Fishing canceled!")
            FishingStatus.InMinigame = false
            
            if FishingStatus.IsHolding then
                InputUp()
                FishingStatus.IsHolding = false
            end
            
            HideFishingUI()
            task.wait(1)
        end)
    end
end

-- Reconnect on Respawn
LocalPlayer.CharacterAdded:Connect(function()
    DebugLog("üîÑ Character respawned, resetting...")
    FishingStatus.InMinigame = false
    
    if FishingStatus.IsHolding then
        InputUp()
        FishingStatus.IsHolding = false
    end
    
    task.wait(3)
    ConnectFishingEvents()
end)

-- Anti AFK
local VirtualUser = game:GetService("VirtualUser")
LocalPlayer.Idled:Connect(function()
    VirtualUser:CaptureController()
    VirtualUser:ClickButton2(Vector2.new())
end)

-- Initialize
ConnectFishingEvents()

-- ============================================
-- üé® UI TABS & CONTROLS
-- ============================================

local Tab = Window:Tab({
    Title = "Fishing",
    Icon = "fish",
    Locked = false,
})

-- Keybind (PC only)
if not IsMobile then
    Tab:Keybind({
        Title = "Keybind",
        Desc = "Keybind to open ui",
        Value = "V",
        Callback = function(v)
            Window:SetToggleKey(Enum.KeyCode[v])
        end
    })
end

-- Section: Auto Fishing
Tab:Section({
    Title = "Auto Fishing"
})

-- Toggle Auto Fish
Tab:Toggle({
    Title = "Auto Fish",
    Desc = "Continuous hold-release loop (Hold ‚Üí Wait ‚Üí Repeat)",
    Value = false,
    Callback = function(state) 
        FishingConfig.Enabled = state
        
        if state then
            DebugLog("‚úÖ Auto Fish ENABLED")
            
            if HasRodEquipped() then
                StartCastLoop()
                WindUI:Notify({
                    Title = "Auto Fish Started",
                    Content = "Hold: " .. FishingConfig.HoldDuration .. "s | Loop running...",
                    Duration = 3,
                    Icon = "fish",
                })
            else
                FishingConfig.Enabled = false
                WindUI:Notify({
                    Title = "Auto Fish",
                    Content = "‚ö†Ô∏è Please Equip Rod First!",
                    Duration = 5,
                    Icon = "alert-circle",
                })
            end
        else
            DebugLog("üõë Auto Fish DISABLED")
            StopCastLoop()
            WindUI:Notify({
                Title = "Auto Fish Stopped",
                Content = "Loop stopped",
                Duration = 2,
                Icon = "fish",
            })
        end
    end
})

-- Toggle Hide UI
Tab:Toggle({
    Title = "Hide Fishing UI",
    Desc = "Automatically hide fishing minigame UI",
    Value = true,
    Callback = function(state)
        FishingConfig.HideUI = state
    end
})

-- Section: Settings
Tab:Section({
    Title = "Settings"
})

-- Slider Hold Duration
Tab:Slider({
    Title = "Hold Duration",
    Desc = "How long to hold touch/click (seconds)",
    Step = 0.1,
    Value = {
        Min = 0.5,
        Max = 3,
        Default = 2,
    },
    Callback = function(value)
        FishingConfig.HoldDuration = value
        DebugLog("‚è±Ô∏è Hold duration: " .. value .. "s")
    end
})

-- Slider Delay After Release
Tab:Slider({
    Title = "Delay After Release",
    Desc = "Wait time after releasing before next hold (seconds)",
    Step = 0.1,
    Value = {
        Min = 0.1,
        Max = 2,
        Default = 0.3,
    },
    Callback = function(value)
        FishingConfig.DelayAfterRelease = value
        DebugLog("‚è±Ô∏è Delay after release: " .. value .. "s")
    end
})

-- Slider Delay After Catch
Tab:Slider({
    Title = "Delay After Catch",
    Desc = "Delay after catching fish (seconds)",
    Step = 0.1,
    Value = {
        Min = 0.1,
        Max = 3,
        Default = 0.5,
    },
    Callback = function(value)
        FishingConfig.DelayAfterCatch = value
    end
})

-- Slider Delay Before Recast
Tab:Slider({
    Title = "Delay Before Recast",
    Desc = "Delay before starting loop again after catch",
    Step = 0.1,
    Value = {
        Min = 0.5,
        Max = 5,
        Default = 1,
    },
    Callback = function(value)
        FishingConfig.DelayBeforeRecast = value
    end
})

-- Section: Tools
Tab:Section({
    Title = IsMobile and "Mobile Tools" or "Debug Tools"
})

-- Manual Test
Tab:Button({
    Title = "Test Single Cast",
    Desc = "Test one hold-release cycle",
    Callback = function()
        if HasRodEquipped() then
            task.spawn(function()
                PerformHoldCycle()
            end)
            WindUI:Notify({
                Title = "Test Cast",
                Content = "Performing single cycle: Hold " .. FishingConfig.HoldDuration .. "s",
                Duration = 2,
                Icon = "fish",
            })
        else
            WindUI:Notify({
                Title = "Test Cast",
                Content = "‚ö†Ô∏è No rod equipped!",
                Duration = 2,
                Icon = "alert-circle",
            })
        end
    end
})

-- Debug Mode
Tab:Toggle({
    Title = "Debug Mode",
    Desc = "Show detailed logs in console (F9)",
    Value = false,
    Callback = function(state)
        FishingConfig.DebugMode = state
        DebugLog("Debug mode " .. (state and "ENABLED" or "DISABLED"))
    end
})

-- Info
Tab:Section({
    Title = "Info"
})

Tab:Label({
    Title = "Platform: " .. Platform,
    Desc = "Loop Mode: Hold " .. FishingConfig.HoldDuration .. "s ‚Üí Release ‚Üí Wait " .. FishingConfig.DelayAfterRelease .. "s ‚Üí Repeat"
})

-- Success notification
WindUI:Notify({
    Title = "Villains Hub Loaded",
    Content = Platform .. " | Continuous Hold Loop Mode",
    Duration = 5,
    Icon = "crown",
})

DebugLog("=== SCRIPT LOADED ===")
DebugLog("Platform: " .. Platform)
DebugLog("Mode: Continuous Hold-Release Loop")
